AWSTemplateFormatVersion: '2010-09-09'
Description: Integration tests for the Editorial Tools services
Parameters:
  Stack:
    Type: String
    Description: Name of this stack
    Default: media-service
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
  AMI:
    Description: AMI ID
    Type: String
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.small
  VpcId:
    Description: ID of the VPC onto which to launch the application eg. vpc-1234abcd
    Type: AWS::EC2::VPC::Id
  PrivateVpcSubnets:
    Description: Subnets to use in VPC for private EC2 instances eg. subnet-abcd1234
    Type: List<AWS::EC2::Subnet::Id>
  KinesisStreamName:
    Type: String
    Description: The name (NOT arn) of the Kinesis stream that logs should be shipped to
  LoggingRoleToAssumeArn:
    Type: String
    Description: Name of IAM role in logging account e.g. arn:aws:iam::222222222222:role/LoggingRole
  LoggingStreamName:
    Type: String
    Description: Name of Kinesis Logging stream
Resources:
  LoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LoggingPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Resource: !Ref "LoggingRoleToAssumeArn"
      Roles:
        - !Ref "EditorialToolsIntegrationTestsRole"
  EditorialToolsIntegrationTestsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
  ServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'EditorialToolsIntegrationTestsRole'
  UserDataPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: download-artifacts-from-s3
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - arn:aws:s3::*:editorial-tools-integration-tests-dist/*
              - arn:aws:s3::*:pan-domain-auth-settings/*
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - arn:aws:s3::*:editorial-tools-integration-tests/*
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            - ec2:DescribeTags
            Resource: "*"
      Roles:
        - !Ref EditorialToolsIntegrationTestsRole
    DependsOn: EditorialToolsIntegrationTestsRole

  SSMRunCommandPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ssm-run-command-policy
      PolicyDocument:
        Statement:
          # minimal policy to allow running commands via ssm
          - Effect: Allow
            Resource: "*"
            Action:
              - ec2messages:AcknowledgeMessage
              - ec2messages:DeleteMessage
              - ec2messages:FailMessage
              - ec2messages:GetEndpoint
              - ec2messages:GetMessages
              - ec2messages:SendReply
              - ssm:UpdateInstanceInformation
              - ssm:ListInstanceAssociations
              - ssm:DescribeInstanceProperties
              - ssm:DescribeDocumentParameters
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
      Roles:
        - !Ref "EditorialToolsIntegrationTestsRole"

  LogShippingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: log-shipping-policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - kinesis:Describe*
              - kinesis:Put*
            Resource:
              - !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisStreamName}
      Roles:
        - !Ref "EditorialToolsIntegrationTestsRole"
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'PrivateVpcSubnets'
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '1'
      MaxSize: '2'
      Tags:
        - Key: Stage
          PropagateAtLaunch: 'true'
          Value: !Ref 'Stage'
        - Key: Stack
          PropagateAtLaunch: 'true'
          Value: !Ref Stack
        - Key: App
          PropagateAtLaunch: 'true'
          Value: editorial-tools-integration-tests
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cron.d/run-integration-tests:
              content: !Sub |
                */10 * * * * root /data/editorial-tools-integration-tests/scripts/run.sh ${Stage} >> /var/log/tests.log 2>&1

            "/etc/logstash/conf.d/logstash.conf":
              content: !Sub |
                input {
                    file {
                        path => "/data/editorial-tools-integration-tests/logs/tests.json.log"
                        type => "application"
                        codec => json
                    }
                }
                filter {
                    mutate {
                        add_field => {
                            "app" => "editorial-tools-integration-tests"
                            "stack" => "media-service"
                            "stage" => "${Stage}"
                        }
                    }
                }
                output {
                   kinesis {
                       role_arn => "${LoggingRoleToAssumeArn}"
                       stream_name => "${LoggingStreamName}"
                       randomized_partition_key => true
                       region => "${AWS::Region}"
                    }
                }
              mode: "000644"
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sdk
          Ebs:
            VolumeSize: 150
            VolumeType: gp2
      ImageId: !Ref 'AMI'
      AssociatePublicIpAddress: true
      SecurityGroups:
        - !Ref 'ApplicationSecurityGroup'
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'ServerInstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ev

          cfn-init -s ${AWS::StackId} -r LaunchConfig --region ${AWS::Region} || error_exit ''Failed to run cfn-init''

          attach-ebs-volume -d k -m /data


          # Set up the tests and their depedencies
          aws s3 cp s3://editorial-tools-integration-tests-dist/media-service/${Stage}/editorial-tools-integration-tests/editorial-tools-integration-tests.zip /tmp/editorial-tools-integration-tests.zip
          unzip -q /tmp/editorial-tools-integration-tests.zip -d /data/editorial-tools-integration-tests

          # Install Cypress dependencies
          apt install -y npm
          npm install --global yarn
          apt-get -y install libgtk2.0-0 libgtk-3-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
          /data/editorial-tools-integration-tests/node_modules/cypress/bin/cypress install


          # get envars
          aws s3 cp s3://editorial-tools-integration-tests-dist/env.json /data/editorial-tools-integration-tests/env.json

          # Set up logstash
          systemctl start logstash

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP
      VpcId: !Ref 'VpcId'
